#define LEFT_MOTOR OUT_A
#define RIGHT_MOTOR OUT_C
#define BOTH_MOTOR OUT_AC

#define FORWARD_SPEED_RIGHT 58
#define FORWARD_SPEED_LEFT 60
#define REVERSE_SPEED -60

#define LEFT_SENSOR IN_1
#define RIGHT_SENSOR IN_4
#define TOP_SENSOR IN_1
#define LIGHT_LIMIT 48

bool isTurning = false;
mutex moveMutex;

task senseLeft()
{

 while(true)
 {

  until(!isTurning && (Sensor(LEFT_SENSOR) < LIGHT_LIMIT));  // left sensor is over line
  //Acquire(moveMutex);
  Float(LEFT_MOTOR);                                 // turn right
  //Release(moveMutex);
  until(Sensor(LEFT_SENSOR) > LIGHT_LIMIT);
  Wait(5); // ???
  //Acquire(moveMutex);
  OnFwd(LEFT_MOTOR, FORWARD_SPEED_LEFT);
  //Release(moveMutex);
 }
}

task senseRight()
{
 while(true)
 {
  until(!isTurning && (Sensor(RIGHT_SENSOR) < LIGHT_LIMIT));  // left sensor is over line
  //Acquire(moveMutex);
  Float(RIGHT_MOTOR);                               // turn left
  //Release(moveMutex);
  until(Sensor(RIGHT_SENSOR) > LIGHT_LIMIT);
  Wait(5); // ???
  //Acquire(moveMutex);
  OnFwd(RIGHT_MOTOR, FORWARD_SPEED_RIGHT);
  //Release(moveMutex);
 }
}

task move()
{

 /*int moveList[200] = {1, 1, 1, 1, 1, 1, 1};         // list of moves: [forward, left, right, back]
 int index = 0;
 while(true)
 {
  until(TOP_SENSOR < LIGHT_LIMIT);                  // robot at intersection
  isTurning = true;

   switch(moveList[index])
   {
    case(1):
    {
     // go forward
    break;
    }
    case(2):
    {
     // turn left
     break;
    }
    case(3):
    {
     // turn right
     break;
    }
    case(4):
    {
     // turn around
     break;
    }

    default:
     // ?
  }
  ++index;
  isTurning = false;

 }*/
}

task main()
{
 SetSensorLight(LEFT_SENSOR);
 SetSensorLight(RIGHT_SENSOR);
 //SetSensorLight(TOP_SENSOR);
 OnFwd(LEFT_MOTOR, FORWARD_SPEED_LEFT);
 OnFwd(RIGHT_MOTOR, FORWARD_SPEED_RIGHT);

 /* while(true){
    printf("light level L%d", Sensor(LEFT_SENSOR));
 }     */
 Precedes(senseLeft, senseRight);
}

